#!/usr/bin/env bash
set -eo pipefail; [[ $DOKKU_TRACE ]] && set -x

RETHINKDB_IMAGE=rethinkdb:2.0.4

PENDING_DIR="$DOKKU_ROOT/.rethinkdb/pending-volumes"

# Check if name is specified
if [[ $1 == rethinkdb:* ]]; then
    if [[ -z $2 ]]; then
        echo "You must specify an app name"
        exit 1
    else
        APP="$2"
        if [[ -d "$DOKKU_ROOT/$APP" ]]; then
            APP_EXISTS=true
        else
            APP_EXISTS=false
        fi
    fi

    VOLUME_DIR=""
    if [[ -d "$DOKKU_ROOT/$APP/rethinkdb" ]]; then
        VOLUME_DIR="$DOKKU_ROOT/$APP/rethinkdb"
    elif [[ -d "$PENDING_DIR/$APP" ]]; then
        VOLUME_DIR="$PENDING_DIR/$APP"
    fi
    BIND_FILE="$VOLUME_DIR/PUBLISH"

    CONTAINER_NAME="rethinkdb_$APP"
    ENV_FILE="$DOKKU_ROOT/$APP/ENV"
fi

config_restart_app() {
  local APP="$1";

  echo "-----> Releasing $APP ..."
  dokku release $APP
  echo "-----> Release complete!"
  echo "-----> Deploying $APP ..."
  dokku deploy $APP
  echo "-----> Deploy complete!"
}

docker_get_id() {
    local CID=`docker inspect '-f={{.Id}}' "$1" 2> /dev/null || true`
    if [[ "$CID" == "<no value>" ]]; then
      CID=`docker inspect '-f={{.ID}}' "$1" 2> /dev/null || true`
    fi
    echo "$CID"
}

docker_inspect_port() {
    local NAME PORT DUMP
    NAME="$1"
    PORT="$2"
    DUMP="{{(index (index .NetworkSettings.Ports \"$PORT/tcp\") 0).HostPort}}"
    docker inspect "-format=$DUMP" $NAME 2> /dev/null || true
}

bind_port() {
    local CONTAINER_PORT="$1"
    local HOST_PORT="$2"
    if [[ -z HOST_PORT ]]; then
        PORT_BINDING="$CONTAINER_PORT"
    else
        PORT_BINDING="$HOST_PORT:$CONTAINER_PORT"
    fi

    if [[ -f $BIND_FILE ]]; then
        sed -i "/$CONTAINER_PORT\$/ d" $BIND_FILE
    fi

    echo $PORT_BINDING >>"$BIND_FILE"
}

case "$1" in
  rethinkdb:create)

    # Check if an existing DB volume exists
    if [[ -d $VOLUME_DIR ]]; then
        echo "-----> Reusing $CONTAINER_NAME data"
    else
        echo "-----> Creating new RethinkDB volume for $APP"
        if $APP_EXISTS; then
            VOLUME_DIR="$DOKKU_ROOT/$APP/rethinkdb"
        else
            VOLUME_DIR="$PENDING_DIR/$APP"
        fi
        mkdir -p "$VOLUME_DIR"
        chown -R dokku:dokku "$VOLUME_DIR"
        # Container will be linked in pre-release hook
    fi

    if $APP_EXISTS; then
        # Container will be launched in pre-deploy hook
        dokku rethinkdb:link $APP
        config_restart_app $APP
    fi
    ;;

  rethinkdb:delete)
    # Stop the container
    ID=$(docker_get_id "$CONTAINER_NAME")
    if [[ ! -z $ID ]]; then
        docker kill $ID > /dev/null
        docker rm $ID > /dev/null
    fi

    # Remove persistent volume
    if [[ -d "$VOLUME_DIR" ]]; then
        rm -rf "$VOLUME_DIR"
    fi
    if [[ -d "$PENDING_DIR/$APP" ]]; then
        rm -rf "$PENDING_DIR/$APP"
    fi

    if [[ -f $ENV_FILE ]]; then
        sed -i '/^export (?:RETHINKDB|RDB)_HOST=$RETHINKDB_LINK_PORT_28015_TCP_ADDR$/ d' $ENV_FILE
        sed -i '/^export (?:RETHINKDB|RDB)_PORT=$RETHINKDB_LINK_PORT_28015_TCP_PORT$/ d' $ENV_FILE
    fi
    echo "-----> RethinkDB container deleted: $CONTAINER_NAME"
    if $APP_EXISTS; then
        config_restart_app $APP
    fi
    ;;

  rethinkdb:link)
    if $APP_EXISTS; then
        # Add aliases for RETHINKDB variables
        if [ -f $ENV_FILE ]; then
            sed -i "/^export (?:RETHINKDB|RDB)_(?:HOST|PORT)=/ d" $ENV_FILE
        fi
        cat >>$ENV_FILE <<"EOF"
export RETHINKDB_HOST=$RETHINKDB_LINK_PORT_28015_TCP_ADDR
export RETHINKDB_PORT=$RETHINKDB_LINK_PORT_28015_TCP_PORT
export RDB_HOST=$RETHINKDB_LINK_PORT_28015_TCP_ADDR
export RDB_PORT=$RETHINKDB_LINK_PORT_28015_TCP_PORT
EOF
    else
        echo "Cannot link non-existing app"
        exit 1
    fi
    ;;

  rethinkdb:bind-webui)
    if [[ -z $VOLUME_DIR ]]; then
        echo "No RethinkDB volume found for $APP"
        exit 1
    fi
    bind_port 8080 "$3"
    if $APP_EXISTS; then
        dokku deploy $APP
    else
        dokku rethinkdb:start $app
    fi
    ;;

  rethinkdb:bind-cluster)
    if [[ -z $VOLUME_DIR ]]; then
        echo "No RethinkDB volume found for $APP"
        exit 1
    fi
    bind_port 29015 "$3"
    if $APP_EXISTS; then
        dokku deploy $APP
    else
        dokku rethinkdb:start $app
    fi
    ;;

  rethinkdb:unbind)
    if [[ -z $VOLUME_DIR ]]; then
        echo "No RethinkDB volume found for $APP"
        exit 1
    fi
    if [ -f $BIND_FILE ]; then
        rm $BIND_FILE
    fi
    if $APP_EXISTS; then
        dokku deploy $APP
    else
        dokku rethinkdb:start $app
    fi
    ;;

  rethinkdb:stop)
    ID=$(docker_get_id "$CONTAINER_NAME")
    if [[ ! -z "$ID" ]]; then
        docker stop $ID > /dev/null
    fi
    ;;

  rethinkdb:start)
    if [[ -z $VOLUME_DIR ]]; then
        echo "No RethinkDB volume found for $APP"
        exit 1
    fi

    dokku rethinkdb:stop $APP
    ID=$(docker_get_id "$CONTAINER_NAME")
    if [[ ! -z "$ID" ]]; then
        docker rm $ID > /dev/null
    fi

    PORTS=()
    DYNAMIC_PORTS=()
    if [[ -f "$BIND_FILE" ]]; then
        while read line; do
          PORTS+=("-p" "$line")
          if [[ ! "$line" =~ [0-9]+\:[0-9]+$ ]]; then
            DYNAMIC_PORTS+=("$line")
          fi
        done < $BIND_FILE
    fi

    VOLUME="$VOLUME_DIR:/rethinkdb"

    docker run -v $VOLUME --name=$CONTAINER_NAME \
        ${PORTS[@]} -d $RETHINKDB_IMAGE

    # Save all dynamic port bindings as static bindings
    for port in "${DYNAMIC_PORTS[@]}"; do
        HOST_PORT=$(docker_inspect_port $CONTAINER_NAME $port)
        sed -i "s/^$port\$/$HOST_PORT:$port/" $BIND_FILE
    done

    dokku rethinkdb:info $APP
    ;;

  rethinkdb:info)
    ID=$(docker_get_id "$CONTAINER_NAME")
    if [[ -z "$ID" ]]; then
        echo "No container found for $APP"
        exit 1
    else
        IP=$(docker inspect -f '{{.NetworkSettings.IPAddress}}' $ID)
        echo "       Container ID: ${ID:0:12}"
        echo "       Container IP: ${IP}"
        WEBUI_PORT=$(docker_inspect_port $ID 8080)
        if [[ ! -z "$WEBUI_PORT" ]]; then
            echo "       WebUI public port: $WEBUI_PORT"
        fi
        CLUSTER_PORT=$(docker_inspect_port $ID 29015)
        if [[ ! -z "$CLUSTER_PORT" ]]; then
            echo "       Cluster public port: $CLUSTER_PORT"
        fi
    fi
    ;;

  rethinkdb:logs)
    ID=$(docker_get_id "$CONTAINER_NAME")
    docker logs $ID | tail -n 100
   ;;

  help)
    cat && cat<<EOF
    rethinkdb:create <app>                          Create a RethinkDB container
    rethinkdb:delete <app>                          Delete specified RethinkDB container
    rethinkdb:bind-webui <app> [host port]          Bind app's RethinkDB container WebUI to host port
    rethinkdb:bind-cluster <app> [host port]        Bind app's RethinkDB cluster port to host
    rethinkdb:unbind <app>                          Unbind app RethinkDB container host port bindings
    rethinkdb:logs <app>                            Display last logs from RethinkDB container
    rethinkdb:info <app>                            Display RethinkDB container address and ports
    rethinkdb:link <app>                            Set app config to link to RethinkDB container
    rethinkdb:start <app>                           (Re)start app's RethinkDB container
    rethinkdb:stop <app>                            Stop app's RethinkDB container
EOF
    ;;

esac
